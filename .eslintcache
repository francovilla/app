[{"C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\index.js":"1","C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\App.js":"2","C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\components\\statics\\index.js":"3","C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\components\\farm\\index.js":"4","C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\components\\nav\\index.js":"5","C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\blockies\\blockies.js":"6","C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\components\\sale\\index.js":"7"},{"size":367,"mtime":1613597277070,"results":"8","hashOfConfig":"9"},{"size":3611,"mtime":1615047403648,"results":"10","hashOfConfig":"9"},{"size":1629,"mtime":1614752307598,"results":"11","hashOfConfig":"9"},{"size":10104,"mtime":1615145958926,"results":"12","hashOfConfig":"9"},{"size":979,"mtime":1614289996050,"results":"13","hashOfConfig":"9"},{"size":3288,"mtime":1614196709014,"results":"14","hashOfConfig":"9"},{"size":5387,"mtime":1615321416964,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"u2z57h",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\index.js",[],["36","37"],"C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\App.js",["38"],"import React, { Component }  from 'react';\r\nimport Nav from './components/nav'\r\nimport Farm from './components/farm';\r\nimport Sale from './components/sale'\r\nimport Statics from './components/statics'\r\nimport './style.css'\r\nimport TokenList from './components/farm/TokenList.json'\r\nimport Web3 from 'web3'\r\nimport FarmAbi from './contracts/MasterChef.json'\r\nimport TokenAbi from  './contracts/HawkToken.json'\r\nimport {BrowserRouter as Router ,Switch , Route} from 'react-router-dom'\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            address: '0x0000',\r\n            login: false,\r\n            farm: '',\r\n        }\r\n    }\r\n\r\n    async loadWeb3(){\r\n        if (window.ethereum) {\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n            this.loadBlockchain()\r\n        } else if(window.web3){\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n            this.loadBlockchain()\r\n        } \r\n    }\r\n\r\n    async loadBlockchain(){\r\n        //Load address\r\n        const web3 = window.web3\r\n        let accounts = await web3.eth.getAccounts()\r\n        //Address events\r\n        window.ethereum.on('accountsChanged', async()=>{ //On change Address\r\n            let accounts = await web3.eth.getAccounts()\r\n            this.setState({address : accounts[0] , login: true})\r\n            console.log(`Account changed: ${accounts[0]}`)\r\n        })\r\n        window.ethereum.on('disconnect', ()=>{ //On disconect\r\n            this.setState({address : 0x0000 , login: false})\r\n            console.log('sss')\r\n        })\r\n        this.setState({address:accounts[0] , login: true})\r\n        console.log(`Account loged: ${accounts[0]}`)\r\n\r\n        //Load Farm\r\n        const networkID = await web3.eth.net.getId()\r\n        const farmData = FarmAbi.networks[networkID]\r\n        if(farmData){\r\n            const farm =  new web3.eth.Contract(FarmAbi.abi, farmData.address)\r\n            window.farm =  farm\r\n            console.log(`Farm loaded: ${farmData.address}`)\r\n        } \r\n        //Load LP\r\n        const tokenList = TokenList.data\r\n        window.tokens = []\r\n        for (let i = 0; i < tokenList.length; i++) {\r\n            const TokenAddress = tokenList[i].lpAddress\r\n            window.tokens.push(new web3.eth.Contract(TokenAbi.abi, TokenAddress))\r\n        }\r\n\r\n        this.forceUpdate() //Update the Web after load all \r\n\r\n        //window.farm.methods.deposit(100, 0).send({from: this.state.address})\r\n\r\n    }\r\n\r\n   \r\n\r\n    componentDidMount(){\r\n        this.loadWeb3()\r\n    }\r\n    \r\nrender(){\r\n    return <div>\r\n    <Nav address={this.state.address}/> \r\n    <h1 style={{marginBottom: 25, color:'transparent'}}>Test</h1>\r\n    {/*Render farms from farms.json */}\r\n   \r\n            \r\n\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/farms\">\r\n                    <div className=\"row d-flex justify-content-center\">\r\n                    {TokenList.data.map((farm) => {\r\n                    return <div key={farm.id} className=\"col-lg-3 col-md-6 col-sm-12 d-flex justify-content-center h-100\">\r\n                        <Farm apy={farm.apy} login={this.state.login} address={this.state.address}  farm={farm}/>\r\n                        </div>   \r\n                    })}\r\n                    </div>\r\n                    </Route>\r\n                    <Route path=\"/sale\">\r\n                        <Sale/>\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        \r\n\r\n     \r\n    </div>\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\components\\statics\\index.js",["39","40"],"import React ,{Component} from 'react'\r\nimport Chart from 'chart.js'\r\nimport './style.css'\r\nclass Statics extends Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    componentDidUpdate(){\r\n        this.loadStatics()\r\n    }\r\n\r\n   async loadStatics(){\r\n      if(window.tokens){\r\n          var balances = []\r\n          var names = ['HAW-BNB', 'BUSD-BNB']\r\n          var colors = ['rgb(0, 110, 255)', 'rgb(255, 208, 0)' ]\r\n          for  (let i = 0; i < window.tokens.length; i++) {\r\n              const token = window.tokens[i];\r\n              console.log('One')\r\n              var result = await token.methods.balanceOf('0x16433f1C0C3c77917B0e282A5B77fF1Eb0426c24').call()\r\n              result = result / (10**18)\r\n              balances.push(result)\r\n          }\r\n        \r\n          var ctx = document.getElementById('pools')\r\n          var chart = new Chart(ctx , {\r\n              type: 'pie',\r\n              data: {\r\n                  datasets: [{\r\n                      data: balances,\r\n                      backgroundColor: colors\r\n                  }],\r\n                  labels: names\r\n              },\r\n              options:{\r\n                  elements: {\r\n                      arc: {\r\n                          borderWidth: 0\r\n                      }\r\n                  }\r\n              }\r\n          })\r\n         \r\n\r\n      }\r\n          \r\n    }\r\n\r\n    printPie(){}\r\n\r\n   \r\nrender(){\r\n   return  <div style={{marginTop:14}} className=\"d-flex justify-content-center\">\r\n        <div className=\"maindiv\" >\r\n        <canvas id=\"pools\"></canvas>\r\n        </div>\r\n   </div>\r\n}\r\n}\r\n\r\nexport default Statics;","C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\components\\farm\\index.js",["41","42"],"import React, { Component }  from 'react';\r\nimport './style.css'\r\nimport {Modal} from 'react-bootstrap'\r\nimport chart from 'chart.js'\r\n\r\n\r\n\r\n\r\nclass Farm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            pending: 0,\r\n            lpStaked: 0,\r\n            apy: 0,\r\n            lp: '',\r\n            tokenBalance: 0,\r\n            tokenDecimals: 0,\r\n            tokenApproved: 0,\r\n            modal: false,\r\n            modalw: false,\r\n            inputValue: '',\r\n            loading: false,\r\n            selector: true\r\n        }\r\n        //Render Functions\r\n        this.maxButton = this.maxButton.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.deposit = this.deposit.bind(this)\r\n        this.whitdraw = this.whitdraw.bind(this)\r\n        this.harvest = this.harvest.bind(this)\r\n        this.approve = this.approve.bind(this)\r\n\r\n    }   \r\n    \r\n\r\n   async componentDidMount(){\r\n  \r\n    setInterval(async() => {\r\n        this.updatePool()\r\n    }, 2000);}\r\n\r\n    async updatePool(){\r\n        try {\r\n            const tokenId = this.props.farm.id \r\n            const token = window.tokens[tokenId]\r\n            const farm = window.farm\r\n\r\n            let tokenBalance = await token.methods.balanceOf(this.props.address).call()\r\n            let tokenApproved = await token.methods.allowance(this.props.address , '0x16433f1C0C3c77917B0e282A5B77fF1Eb0426c24').call()\r\n            const tokenDecimals = await token.methods.decimals().call()\r\n            const lpStaked = await farm.methods.deposited(tokenId  , this.props.address).call()\r\n            const pending = await farm.methods.pendingHawk(tokenId  , this.props.address).call()\r\n\r\n            this.setState({\r\n                pending,\r\n                lpStaked,\r\n                tokenBalance,\r\n                tokenDecimals,\r\n                tokenApproved\r\n            })  \r\n        } catch (error) {\r\n            console.log(`Error fund: ${error}`)\r\n        }\r\n        \r\n    }\r\n\r\n    maxButton(type){\r\n        if(type != 'staked'){\r\n            let value = this.state.tokenBalance / (10 ** this.state.tokenDecimals)\r\n            document.getElementById('inputModal')\r\n            .value = value.toFixed(4)\r\n            this.setState({inputValue: value})\r\n        } else {\r\n            let value = (this.state.lpStaked / (10 ** this.state.tokenDecimals))\r\n            document.getElementById('inputModal')\r\n            .value = value.toFixed(4)\r\n            this.setState({inputValue: value})\r\n        }\r\n        \r\n    }\r\n\r\n    handleChange(e){\r\n        this.setState({inputValue: e.target.value})\r\n    }\r\n\r\n    async deposit(){\r\n        var value = this.state.inputValue * (10 ** this.state.tokenDecimals)\r\n        console.log(value)\r\n        if(this.state.inputValue > 0){\r\n            const tokenId = this.props.farm.id\r\n            const farm = window.farm\r\n            try {\r\n                this.setState({loading: true})\r\n                await farm.methods.deposit(tokenId , window.web3.utils.toBN(`${value}`))\r\n            .send({from: this.props.address})\r\n                this.setState({loading: false})    \r\n            } catch (error) {\r\n                this.setState({loading: false}) \r\n                console.log(error)\r\n            }\r\n        }  \r\n    }\r\n\r\n    async approve(){\r\n        var value = this.state.inputValue * (10 ** this.state.tokenDecimals) * 5\r\n        const tokenId = this.props.farm.id\r\n        const token = window.tokens[tokenId]\r\n            try {\r\n                this.setState({loading: true})\r\n                await token.methods.approve('0x16433f1C0C3c77917B0e282A5B77fF1Eb0426c24' , window.web3.utils.toBN(`${value}`))\r\n            .send({from: this.props.address})\r\n                this.setState({loading: false})    \r\n            } catch (error) {\r\n                this.setState({loading: false}) \r\n                console.log(error)\r\n            }\r\n    }\r\n\r\n    async whitdraw(){\r\n        var value = this.state.inputValue * (10 ** this.state.tokenDecimals) - 100000000000000\r\n        console.log(value)\r\n        if(this.state.inputValue > 0){\r\n            const tokenId = this.props.farm.id\r\n            const farm = window.farm\r\n            try {\r\n                this.setState({loading: true})\r\n                await farm.methods.withdraw(tokenId , window.web3.utils.toBN(`${value}`))\r\n            .send({from: this.props.address})\r\n                this.setState({loading: false})    \r\n            } catch (error) {\r\n                this.setState({loading: false}) \r\n                console.log(error)\r\n            }\r\n        }  \r\n    }\r\n    loadingButton(text){\r\n        return <div>\r\n            <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> {text}\r\n        </div>\r\n    }\r\n\r\n    button(text){\r\n        return <div>\r\n            {text}\r\n        </div>\r\n    }\r\n\r\n    depositDiv(){\r\n        return <div className=\"col-12\">\r\n        <p style={{marginBottom:4}}>Balance: {(this.state.tokenBalance / (10 ** this.state.tokenDecimals)).toFixed(2)} LP    <button onClick={this.maxButton} className=\"btn  max\">MAX</button></p>\r\n    <div className=\"input-group mb-3 d-flex justify-content-center\">\r\n        <input onChange={this.handleChange} id=\"inputModal\" type='number' className='from-control'></input>\r\n    </div>\r\n    <div className='row'>\r\n        <div className=\"col-6\">\r\n        <button  \r\n        onClick={this.state.tokenApproved >= this.state.inputValue * (10 ** this.state.tokenDecimals)? this.deposit : this.approve} \r\n        className=\"btn stake-b\" type=\"button\" disabled={this.state.loading}>\r\n        {this.state.loading ? this.loadingButton('Confirm please...') : \r\n         this.state.tokenApproved >= this.state.inputValue * (10 ** this.state.tokenDecimals)? this.button('Deposit LP') :\r\n         this.button('Approve LP Frist')  } \r\n        </button>\r\n        </div>\r\n\r\n        <div className=\"col-6\">\r\n        <button  \r\n        onClick={()=>{this.setState({modal:false})}} \r\n        className=\"btn back-b\" type=\"button\" > Back\r\n        </button>\r\n        </div>\r\n    </div>\r\n\r\n    </div>\r\n    }\r\n\r\n    whitdrawDiv(){\r\n        return <div className=\"col-12\">\r\n        <p style={{marginBottom:4}}>Staked: {(this.state.lpStaked / (10 ** this.state.tokenDecimals)).toFixed(2)} LP    <button onClick={()=>{this.maxButton('staked')}} className=\"btn  max\">MAX</button></p>\r\n    <div className=\"input-group mb-3 d-flex justify-content-center\">\r\n        <input onChange={this.handleChange} id=\"inputModal\" type='number' className='from-control'></input>\r\n    </div>\r\n    <div className='row'>\r\n        <div className=\"col-6\">\r\n        <button  onClick={this.whitdraw} className=\"btn stake-b\" type=\"button\" disabled={this.state.loading}>\r\n            {this.state.loading ? this.loadingButton('Confirm please...') : this.button('Whitdraw LP') } \r\n            </button>\r\n        </div>\r\n        <div className=\"col-6\">\r\n        <button  \r\n        onClick={()=>{this.setState({modalw:false})}} \r\n        className=\"btn back-b\" type=\"button\" > Back\r\n        </button>\r\n        </div>\r\n    </div>\r\n\r\n    </div>\r\n    }\r\n    async harvest(){\r\n         const tokenId = this.props.farm.id\r\n         await window.farm.methods.withdraw(tokenId , 0).send({from: this.props.address})\r\n    }\r\n\r\n    active(){\r\n        return<div>\r\n            <div style={{marginTop: 7}} className=\"row\">\r\n        <div className=\"col-6\">\r\n        <h5 style={{margin:0}}>{(this.state.pending / (10 ** this.state.tokenDecimals)).toFixed(2)}</h5>\r\n        <p style={{fontSize: 7}}>HAW Pending</p>\r\n        </div>\r\n        <div className=\"col-6 \">\r\n            <button onClick={this.harvest}  className=\"btn harvest-b \"><i className=\"fas fa-tractor\"></i> Harvest</button>\r\n        </div>\r\n    </div>\r\n\r\n    <div style={{marginTop: 7}} className=\"row\">\r\n        <div className=\"col-6\">\r\n        <h5 style={{margin:0}}>{(this.state.lpStaked / (10 ** this.state.tokenDecimals)).toFixed(2)}</h5>\r\n        <p style={{fontSize: 7}}>LP Staked</p>\r\n        </div>\r\n        <div className=\"col-6 \">\r\n            <button onClick={()=>{this.setState({modal:!this.state.modal})}}  className=\"btn harvest-b \">Stake LP</button>\r\n            <button onClick={()=>{this.setState({modalw:!this.state.modalw})}}  className=\"btn harvest-br \">Whitdraw</button>\r\n        </div>\r\n    </div>\r\n        </div> \r\n    }\r\n\r\n    stakeButton(){\r\n       return <button  disabled={!this.props.login} onClick={()=>{this.setState({modal:!this.state.modal})}}  className=\"btn stake-b\">Stake LP</button>\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n\r\nrender(){\r\n    return <div className=\"row farm d-flex justify-content-center \">\r\n        <div style={{marginBottom:10}} className=\"col-12 row \">\r\n            <div className=\"col-12 d-flex justify-content-center \"> <img className=\"farmlogo\" alt=\"\" src={window.location.origin + this.props.farm.img}></img></div>\r\n            <div className=\"col-12 d-flex justify-content-center\"><h4> {this.props.farm.name}</h4></div>\r\n            <div style={{marginBottom: 7, fontSize: 10}} className=\"col-12 text-center\"><p>Deposit {this.props.farm.name} LP Earn HAW</p></div>\r\n            \r\n       {this.state.lpStaked > 100000000000000? this.active(): this.stakeButton()}\r\n        \r\n        </div>\r\n        <div className=\"col-12 row \">\r\n             <div className=\"col-6\"><p style={{fontSize: 12}}>Total Locked</p></div>\r\n            <div className=\"col-6 \"><p style={{fontSize: 12}} className=\"text-end\" >300,321 USD</p></div>\r\n            <div className=\"col-6\"><p style={{fontSize: 12}}>APY</p></div>\r\n            <div className=\"col-6 \"><p  className=\"text-end\" style={{color: 'yellowgreen', fontSize: 12}}>468%</p></div>\r\n         \r\n        </div>  \r\n\r\n       \r\n        <Modal size=\"sm\" show={this.state.modal}>\r\n        <div className=\"row\">\r\n        {this.depositDiv()}\r\n        </div>\r\n        </Modal>\r\n\r\n        <Modal size=\"sm\" show={this.state.modalw}>\r\n        <div className=\"row\">\r\n        {this.whitdrawDiv()}\r\n        </div>\r\n        </Modal>\r\n         \r\n\r\n    </div>\r\n  }\r\n}\r\n\r\n\r\nexport default Farm;\r\n","C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\components\\nav\\index.js",["43"],"import React, { Component }  from 'react';\r\nimport {Navbar ,  } from 'react-bootstrap'\r\nimport './styles.css'\r\nimport blockies from '../../blockies/blockies';\r\n\r\nclass NavS extends Component{\r\n\r\n    render(){\r\n        return <Navbar className=\"navbar-c\" expand=\"lg\" fixed=\"top\">\r\n        <Navbar.Brand  href=\"#\"><h3 className=\"title\">HAWK<i style={{color:'rgb(255, 174, 0'}} className=\"fas fa-feather-alt\"></i>finance</h3></Navbar.Brand>\r\n        <Navbar.Text className=\"text-right\" style={{\r\n                color: 'white',\r\n                verticalAlign: 'middle',\r\n                fontSize: 15,\r\n                backgroundColor: '#090d28',\r\n                padding: 8,\r\n                marginRight: 10,\r\n                borderRadius: 10,\r\n                maxWidth: '40%',\r\n                overflow: \"hidden\",\r\n                textOverflow: 'ellipsis',\r\n            }}> {this.props.address}</Navbar.Text>\r\n        </Navbar>\r\n        \r\n         \r\n    }\r\n}\r\n\r\nexport default NavS","C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\blockies\\blockies.js",["44","45"],"(function() {\n\t// The random number is a js implementation of the Xorshift PRNG\n\tvar randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values\n\n\tfunction seedrand(seed) {\n\t\tfor (var i = 0; i < randseed.length; i++) {\n\t\t\trandseed[i] = 0;\n\t\t}\n\t\tfor (var i = 0; i < seed.length; i++) {\n\t\t\trandseed[i%4] = ((randseed[i%4] << 5) - randseed[i%4]) + seed.charCodeAt(i);\n\t\t}\n\t}\n\n\tfunction rand() {\n\t\t// based on Java's String.hashCode(), expanded to 4 32bit values\n\t\tvar t = randseed[0] ^ (randseed[0] << 11);\n\n\t\trandseed[0] = randseed[1];\n\t\trandseed[1] = randseed[2];\n\t\trandseed[2] = randseed[3];\n\t\trandseed[3] = (randseed[3] ^ (randseed[3] >> 19) ^ t ^ (t >> 8));\n\n\t\treturn (randseed[3]>>>0) / ((1 << 31)>>>0);\n\t}\n\n\tfunction createColor() {\n\t\t//saturation is the whole color spectrum\n\t\tvar h = Math.floor(rand() * 360);\n\t\t//saturation goes from 40 to 100, it avoids greyish colors\n\t\tvar s = ((rand() * 60) + 40) + '%';\n\t\t//lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n\t\tvar l = ((rand()+rand()+rand()+rand()) * 25) + '%';\n\n\t\tvar color = 'hsl(' + h + ',' + s + ',' + l + ')';\n\t\treturn color;\n\t}\n\n\tfunction createImageData(size) {\n\t\tvar width = size; // Only support square icons for now\n\t\tvar height = size;\n\n\t\tvar dataWidth = Math.ceil(width / 2);\n\t\tvar mirrorWidth = width - dataWidth;\n\n\t\tvar data = [];\n\t\tfor(var y = 0; y < height; y++) {\n\t\t\tvar row = [];\n\t\t\tfor(var x = 0; x < dataWidth; x++) {\n\t\t\t\t// this makes foreground and background color to have a 43% (1/2.3) probability\n\t\t\t\t// spot color has 13% chance\n\t\t\t\trow[x] = Math.floor(rand()*2.3);\n\t\t\t}\n\t\t\tvar r = row.slice(0, mirrorWidth);\n\t\t\tr.reverse();\n\t\t\trow = row.concat(r);\n\n\t\t\tfor(var i = 0; i < row.length; i++) {\n\t\t\t\tdata.push(row[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tfunction buildOpts(opts) {\n\t\tvar newOpts = {};\n\n\t\tnewOpts.seed = opts.seed || Math.floor((Math.random()*Math.pow(10,16))).toString(16);\n\n\t\tseedrand(newOpts.seed);\n\n\t\tnewOpts.size = opts.size || 8;\n\t\tnewOpts.scale = opts.scale || 4;\n\t\tnewOpts.color = opts.color || createColor();\n\t\tnewOpts.bgcolor = opts.bgcolor || createColor();\n\t\tnewOpts.spotcolor = opts.spotcolor || createColor();\n\n\t\treturn newOpts;\n\t}\n\n\tfunction renderIcon(opts, canvas) {\n\t\topts = buildOpts(opts || {});\n\t\tvar imageData = createImageData(opts.size);\n\t\tvar width = Math.sqrt(imageData.length);\n\n\t\tcanvas.width = canvas.height = opts.size * opts.scale;\n\n\t\tvar cc = canvas.getContext('2d');\n\t\tcc.fillStyle = opts.bgcolor;\n\t\tcc.fillRect(0, 0, canvas.width, canvas.height);\n\t\tcc.fillStyle = opts.color;\n\n\t\tfor(var i = 0; i < imageData.length; i++) {\n\n\t\t\t// if data is 0, leave the background\n\t\t\tif(imageData[i]) {\n\t\t\t\tvar row = Math.floor(i / width);\n\t\t\t\tvar col = i % width;\n\n\t\t\t\t// if data is 2, choose spot color, if 1 choose foreground\n\t\t\t\tcc.fillStyle = (imageData[i] == 1) ? opts.color : opts.spotcolor;\n\n\t\t\t\tcc.fillRect(col * opts.scale, row * opts.scale, opts.scale, opts.scale);\n\t\t\t}\n\t\t}\n\t\treturn canvas;\n\t}\n\n\tfunction createIcon(opts) {\n\t\tvar canvas = document.createElement('canvas');\n\n\t\trenderIcon(opts, canvas);\n\n\t\treturn canvas;\n\t}\n\n\tvar api = {\n\t\tcreate: createIcon,\n\t\trender: renderIcon\n\t};\n\n\tif (typeof module !== \"undefined\") {\n\t\tmodule.exports = api;\n\t}\n\tif (typeof window !== \"undefined\") {\n\t\t window.blockies = api;\n\t}\n\n})();\n","C:\\Users\\Dev\\Desktop\\HawkProyect\\app\\src\\components\\sale\\index.js",["46","47","48","49","50","51","52"],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":5,"column":8,"nodeType":"59","messageId":"60","endLine":5,"endColumn":15},{"ruleId":"61","severity":1,"message":"62","line":5,"column":5,"nodeType":"63","messageId":"64","endLine":7,"endColumn":6},{"ruleId":"57","severity":1,"message":"65","line":26,"column":15,"nodeType":"59","messageId":"60","endLine":26,"endColumn":20},{"ruleId":"57","severity":1,"message":"66","line":4,"column":8,"nodeType":"59","messageId":"60","endLine":4,"endColumn":13},{"ruleId":"67","severity":1,"message":"68","line":69,"column":17,"nodeType":"69","messageId":"70","endLine":69,"endColumn":19},{"ruleId":"57","severity":1,"message":"71","line":4,"column":8,"nodeType":"59","messageId":"60","endLine":4,"endColumn":16},{"ruleId":"72","severity":1,"message":"73","line":9,"column":12,"nodeType":"59","messageId":"74","endLine":9,"endColumn":13},{"ruleId":"67","severity":1,"message":"75","line":101,"column":34,"nodeType":"69","messageId":"70","endLine":101,"endColumn":36},{"ruleId":"76","severity":1,"message":"77","line":65,"column":21,"nodeType":"78","endLine":65,"endColumn":94},{"ruleId":"76","severity":1,"message":"77","line":81,"column":63,"nodeType":"78","endLine":81,"endColumn":136},{"ruleId":"76","severity":1,"message":"77","line":82,"column":63,"nodeType":"78","endLine":82,"endColumn":136},{"ruleId":"76","severity":1,"message":"77","line":83,"column":63,"nodeType":"78","endLine":83,"endColumn":136},{"ruleId":"76","severity":1,"message":"77","line":84,"column":63,"nodeType":"78","endLine":84,"endColumn":136},{"ruleId":"76","severity":1,"message":"77","line":92,"column":113,"nodeType":"78","endLine":92,"endColumn":186},{"ruleId":"76","severity":1,"message":"77","line":102,"column":172,"nodeType":"78","endLine":102,"endColumn":245},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'Statics' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'chart' is assigned a value but never used.","'chart' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'blockies' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]